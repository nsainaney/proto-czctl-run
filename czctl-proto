#!/usr/bin/env bash
# This script was generated by bashly 1.1.10 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
czctl_proto_usage() {
  if [[ -n $long_usage ]]; then
    printf "czctl-proto - Prototype for czctl-run\n"
    echo

  else
    printf "czctl-proto - Prototype for czctl-run\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  czctl-proto COMMAND\n"
  printf "  czctl-proto [COMMAND] --help | -h\n"
  printf "  czctl-proto --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Run and consume an image\n" "run   "
  printf "  %s   Lists images in the registry\n" "images"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
czctl_proto_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "czctl-proto run - Run and consume an image\n"
    echo

  else
    printf "czctl-proto run - Run and consume an image\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  czctl-proto run IMAGE_NAME [OPTIONS]\n"
  printf "  czctl-proto run --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--port, -p PORT"
    printf "\n"
    echo

    # :flag.usage
    printf "  %s\n" "--service, -s SERVICE (required)"
    printf "\n"
    echo

    # :flag.usage
    printf "  %s\n" "--namespace, -n NAMESPACE (required)"
    printf "\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "IMAGE_NAME"
    printf "\n"
    echo

  fi
}

# :command.usage
czctl_proto_images_usage() {
  if [[ -n $long_usage ]]; then
    printf "czctl-proto images - Lists images in the registry\n"
    echo

  else
    printf "czctl-proto images - Lists images in the registry\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  czctl-proto images\n"
  printf "  czctl-proto images --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg flags passthru
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions
# :command.function
czctl_proto_run_command() {
  # src/run_command.sh
  # echo "# this file is located in 'src/root_command.sh'"
  # echo "# you can edit it freely and regenerate (it will not be overwritten)"
  # inspect_args

  yaml=$(cat ./k8s/template.yaml | sed "s/%%NAME%%/${args[--service]}/" | sed "s/%%PORT%%/${args[--port]}/" | sed "s/%%IMAGE%%/${args[image_name]}/" | sed "s/%%NAMESPACE%%/${args[--namespace]}/")

  # echo "$yaml"

  if [ ! -d "./ssl" ]; then
      mkdir ssl
      openssl req -x509 -newkey rsa:4096 -sha256 -days 365 -nodes \
      -keyout ssl/registry.key -out ssl/registry.crt -subj "/CN=registry.codezero.svc.cluster.local" \
      -addext "subjectAltName=DNS:registry.codezero.svc.cluster.local"

      kubectl create secret tls registry-tls --key ssl/registry.key --cert ssl/registry.crt --namespace codezero

      kubectl -n codezero apply -f ./k8s/registry.yaml
  fi

  echo "codezero/registry" | czctl consume apply -

  docker tag ${args[image_name]} registry.codezero:5000/${args[image_name]}
  DOCKER_OPTS="--insecure-registry registry.codezero:5000" docker push registry.codezero:5000/${args[image_name]}

  kubectl create ns ${args[--namespace]} || true

  # kubectl create secret docker-registry regcred \
  #   --docker-server=registry.codezero \
  #   --docker-username="" \
  #   --docker-password="" \
  #   --namespace=${args[--namespace]}

  kubectl apply -f - <<EOF
$yaml
EOF

  echo "${args[--namespace]}/${args[--service]}" | czctl consume apply -
}

# :command.function
czctl_proto_images_command() {
  # src/images_command.sh
  echo "codezero/registry" | czctl consume apply -
  curl -k https://registry.codezero:5000/v2/_catalog
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        czctl_proto_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    run)
      action="run"
      shift
      czctl_proto_run_parse_requirements "$@"
      shift $#
      ;;

    images)
      action="images"
      shift
      czctl_proto_images_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      czctl_proto_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
czctl_proto_run_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        czctl_proto_run_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="run"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --port | -p)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--port']="$2"
          shift
          shift
        else
          printf "%s\n" "--port requires an argument: --port, -p PORT" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --service | -s)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--service']="$2"
          shift
          shift
        else
          printf "%s\n" "--service requires an argument: --service, -s SERVICE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --namespace | -n)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--namespace']="$2"
          shift
          shift
        else
          printf "%s\n" "--namespace requires an argument: --namespace, -n NAMESPACE" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['image_name']+x} ]]; then
          args['image_name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['image_name']+x} ]]; then
    printf "missing required argument: IMAGE_NAME\nusage: czctl-proto run IMAGE_NAME [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.required_flags_filter
  if [[ -z ${args['--service']+x} ]]; then
    printf "missing required flag: --service, -s SERVICE\n" >&2
    exit 1
  fi
  if [[ -z ${args['--namespace']+x} ]]; then
    printf "missing required flag: --namespace, -n NAMESPACE\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
czctl_proto_images_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        czctl_proto_images_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="images"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "run") czctl_proto_run_command ;;
    "images") czctl_proto_images_command ;;
  esac
}

initialize
run "$@"
